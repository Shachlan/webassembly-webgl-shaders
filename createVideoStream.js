import { size as globalSize } from "./globals";

export function RegisterNativeTextureId(textureResource) {
  var id = GL.getNewId(GL.textures); // already included in code generated by emscripten
  textureResource.name = id;
  GL.textures[id] = textureResource;

  return id;
}

function UnregisterNativeTextureId(nativeTextureId) {
  var tex = GL.textures[nativeTextureId];

  tex.name = 0;
  GL.textures[nativeTextureId] = null;

  return tex;
}

export function initTexture(gl) {
  const texture = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, texture);

  // Because video havs to be download over the internet
  // they might take a moment until it's ready so
  // put a single pixel in the texture so we can
  // use it immediately.
  const level = 0;
  const internalFormat = gl.RGBA;
  const width = 1;
  const height = 1;
  const border = 0;
  const srcFormat = gl.RGBA;
  const srcType = gl.UNSIGNED_BYTE;
  const pixel = new Uint8Array([0, 0, 255, 255]); // opaque blue
  gl.texImage2D(
    gl.TEXTURE_2D,
    level,
    internalFormat,
    width,
    height,
    border,
    srcFormat,
    srcType,
    pixel
  );

  // Turn off mips and set  wrapping to clamp to edge so it
  // will work regardless of the dimensions of the video.
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);

  return texture;
}

//
// copy the video texture
//
export function updateTexture(gl, texture, video) {
  const level = 0;
  const internalFormat = gl.RGBA;
  const srcFormat = gl.RGBA;
  const srcType = gl.UNSIGNED_BYTE;
  gl.bindTexture(gl.TEXTURE_2D, texture);
  gl.texImage2D(
    gl.TEXTURE_2D,
    level,
    internalFormat,
    srcFormat,
    srcType,
    video
  );
}

/**
 *
 * @param {HTMLVideoElement} videoElement
 * @param {function} frameCallback
 */
export function startVideoStream(videoElement) {
  if (videoElement.readyState === 4) {
    console.log("ready to play");

    videoElement.play();
  } else {
    videoElement.onloadeddata = () => {
      console.log("loaded");

      videoElement.play();
    };
  }
}
